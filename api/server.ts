import express from "express";
import axios from "axios";
import sharp from "sharp";
import path from "path";
import fs from "fs";
import { fileURLToPath } from "url";

// ESM replacements for __filename & __dirname
// __dirname will now point to the 'api' directory on Vercel.
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
// --- UNIVERSAL PORT CONFIGURATION ---
// Vercel provides process.env.PORT, otherwise default to 3000 for local use.
const PORT = process.env.PORT || 3000; 
// ------------------------------------

// Health check route
app.get("/", (_req, res) => {
Â  res.send("API is running");
});

/**
Â * GET /api/framed-avatar/:username
Â * Generates an image with a user's GitHub avatar framed by a theme image.
Â */
app.get("/api/framed-avatar/:username", async (req, res) => {
Â  try {
Â  Â  const username = req.params.username;
Â  Â  const theme = (req.query.theme as string) || "base";
Â  Â  const size = Math.max(64, Math.min(Number(req.query.size ?? 256), 1024));

Â  Â  // Define avatar size and offset for the frame
Â  Â  const AVATAR_SCALE_FACTOR = 0.8; 
Â  Â  const avatarSize = Math.floor(size * AVATAR_SCALE_FACTOR);
Â  Â  const offset = Math.floor((size - avatarSize) / 2);
Â  Â  
Â  Â  // Calculate a corner radius for the avatar (e.g., 10% of avatar size)
Â  Â  const cornerRadius = Math.floor(avatarSize * 0.1); 

Â  Â  console.log(`Fetching avatar for user=${username}, theme=${theme}, size=${size}`);

Â  Â  // Fetch GitHub avatar
Â  	// Added explicit casting to ensure Vercel's TypeScript compilation is happy
    const avatarUrl = `https://github.com/${username}.png?size=${size}`;
    const avatarResponse = await axios.get(avatarUrl, { responseType: "arraybuffer" } as any);
    const avatarBuffer = Buffer.from(avatarResponse.data);

Â  Â  // --- File Path Corrected to public/frames ---
Â  Â  // path.join(__dirname, "..") goes to the project root.
Â  Â  // We then explicitly step into the 'public' folder.
Â  Â  const themePath = path.join(__dirname, "..", "public", "frames", theme, "frame.png");
Â  Â  
Â  Â  if (!fs.existsSync(themePath)) {
Â  Â  Â  // Returning 404 instead of crashing if the theme is not found
Â  Â  Â  return res.status(404).json({ error: `Theme '${theme}' not found. Checked path: ${themePath}. Ensure 'frames' is in the 'public' directory.` });
Â  Â  }
Â  Â  const frameBuffer = fs.readFileSync(themePath);
Â  Â  // --- End File Path Correction ---

Â  Â  // 1. Resize the Avatar to the smaller, square size
Â  Â  const rawAvatar = await sharp(avatarBuffer).resize(avatarSize, avatarSize).png().toBuffer();
Â  Â  
Â  Â  // 2. Create an SVG mask for a rounded rectangle (squircle)
Â  Â  const roundedSvg = `
Â  Â  Â  <svg width="${avatarSize}" height="${avatarSize}">
Â  Â  Â  Â  <rect 
Â  Â  Â  Â  Â  x="0" y="0" 
Â  Â  Â  Â  Â  width="${avatarSize}" height="${avatarSize}" 
Â  Â  Â  Â  Â  rx="${cornerRadius}" ry="${cornerRadius}" 
Â  Â  Â  Â  Â  fill="white" 
Â  Â  Â  Â  />
Â  Â  Â  </svg>
Â  Â  `;
Â  Â  const roundedMaskBuffer = Buffer.from(roundedSvg);
Â  Â  
Â  Â  // 3. Apply the rounded corner mask to the avatar
Â  Â  const roundedAvatar = await sharp(rawAvatar)
Â  Â  Â  .composite([{ 
Â  Â  Â  Â  input: roundedMaskBuffer, 
Â  Â  Â  Â  blend: 'dest-in' // Uses the mask's alpha channel to create transparency
Â  Â  Â  }])
Â  Â  Â  .png()
Â  Â  Â  .toBuffer();

Â  Â  // 4. Resize the Frame to the full size
Â  Â  const frameResized = await sharp(frameBuffer).resize(size, size).png().toBuffer();

Â  Â  // 5. Create a blank canvas the full size with a transparent background
Â  Â  const canvas = sharp({
Â  Â  Â  Â  create: {
Â  Â  Â  Â  Â  Â  width: size,
Â  Â  Â  Â  Â  Â  height: size,
Â  Â  Â  Â  Â  Â  channels: 4,
Â  Â  Â  Â  Â  Â  background: { r: 0, g: 0, b: 0, alpha: 0 } // Transparent background is key
Â  Â  Â  Â  }
Â  Â  }).png();

Â  Â  // 6. Composite the rounded avatar and the full-sized frame
Â  Â  const finalImage = await canvas
Â  Â  Â  .composite([
Â  Â  Â  Â  // Place the rounded avatar, offset to be centered
Â  Â  Â  Â  { 
Â  Â  Â  Â  Â  Â  input: roundedAvatar, 
Â  Â  Â  Â  Â  Â  left: offset, 
Â  Â  Â  Â  Â  Â  top: offset 
Â  Â  Â  Â  },
Â  Â  Â  Â  // Overlay the full-sized frame on top
Â  Â  Â  Â  { 
Â  Â  Â  Â  Â  Â  input: frameResized, 
Â  Â  Â  Â  Â  Â  gravity: "center" 
Â  Â  Â  Â  }
Â  Â  Â  ])
Â  Â  Â  .toBuffer();

Â  Â  res.setHeader("Content-Type", "image/png");
Â  Â  res.send(finalImage);
Â  } catch (error: unknown) {
Â  	// Safely check if the error is an instance of Error
    const err = error instanceof Error ? error : new Error(String(error)); 
    
Â  Â  console.error("Fatal error during image generation:", err.stack || err.message || err);
Â  Â  // Ensure any internal crash is logged and results in a 500
Â  Â  res.status(500).json({ error: "Internal server error during image processing." });
Â  }
});

/**
Â * GET /api/themes
Â * Lists available themes by reading the frames directory inside the public folder.
Â */
app.get("/api/themes", (req, res) => {
Â  // --- File Path Corrected to public/frames ---
Â  const framesDir = path.join(__dirname, "..", "public", "frames");
Â  
Â  if (!fs.existsSync(framesDir)) {
Â  Â  Â  // If the directory doesn't exist, it means the required files were not moved or bundled.
Â  Â  Â  return res.status(500).json({ error: "Frames directory not found. Please ensure 'frames' folder is inside the 'public' folder and deployment configuration is correct." });
Â  }
Â  
Â  const themes = fs.readdirSync(framesDir).filter(folder =>
Â  Â  fs.existsSync(path.join(framesDir, folder, "frame.png"))
Â  );

Â  const result = themes.map(theme => {
Â  Â  const metadataPath = path.join(framesDir, theme, "metadata.json");
Â  Â  let metadata = {};
Â  Â  if (fs.existsSync(metadataPath)) {
Â  Â  Â  try {
Â  Â  Â  Â  metadata = JSON.parse(fs.readFileSync(metadataPath, "utf-8"));
Â  Â  Â  } catch (e) {
Â  Â  Â  Â  console.error(`Error parsing metadata for theme ${theme}:`, e);
Â  Â  Â  }
Â  Â  }
Â  Â  return { theme, ...metadata };
Â  });

Â  res.json(result);
});

// For Vercel, this listener is mostly ignored, but it is necessary for local Express development.
app.listen(PORT, () => {
Â  console.log(`ðŸš€ Server running at http://localhost:${PORT}`);
});
